
GccApplication31.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000f8  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000018c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000146  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000ef  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000195  00000000  00000000  00000b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000050  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000f6  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000009e  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  74:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
#include <avr/interrupt.h>

int s = 0;

ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	s++;
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	90 91 61 00 	lds	r25, 0x0061
  94:	01 96       	adiw	r24, 0x01	; 1
  96:	90 93 61 00 	sts	0x0061, r25
  9a:	80 93 60 00 	sts	0x0060, r24
		
	if (s>10)
  9e:	0b 97       	sbiw	r24, 0x0b	; 11
  a0:	7c f0       	brlt	.+30     	; 0xc0 <__vector_7+0x44>
	{	
		PORTB = (1<<PB0);
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e9       	ldi	r18, 0x9F	; 159
  a8:	86 e8       	ldi	r24, 0x86	; 134
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <__vector_7+0x30>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <__vector_7+0x3a>
  b6:	00 00       	nop
		_delay_ms(500);
		s=0;
  b8:	10 92 61 00 	sts	0x0061, r1
  bc:	10 92 60 00 	sts	0x0060, r1
	}
	
	TCNT1H=0;
  c0:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0;
  c2:	1c bc       	out	0x2c, r1	; 44
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:

int main(void)
{
	DDRB = 0xFF;
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
	
	TCCR1A = 0x00;
  d8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x05;
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	8e bd       	out	0x2e, r24	; 46
	TCNT1H = 0x00;
  de:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0x00;
  e0:	1c bc       	out	0x2c, r1	; 44
	ICR1H = 0x00;
  e2:	17 bc       	out	0x27, r1	; 39
	ICR1L = 0x00;
  e4:	16 bc       	out	0x26, r1	; 38
	OCR1AH = 0x1E;
  e6:	8e e1       	ldi	r24, 0x1E	; 30
  e8:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x85;
  ea:	85 e8       	ldi	r24, 0x85	; 133
  ec:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0x10;
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	89 bf       	out	0x39, r24	; 57
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <main+0x1e>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
